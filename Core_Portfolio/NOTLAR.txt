4 Temel Katman vardır.

1) Entity Layer 
* Bizim varlıklarımızı tutar. Örn/ Skill (yetenekler), About - Education gibi şeyler varlıklarımızdır. Bu varlıkların kendi
içerisinde proportie leri tanımlanacak. Örn/ Skill( yetenek) proporty dediğimiz alt başlıkları olur. Id, Başlığı, Oranı vs gibi

2) Data Access Layer
* Crud Operasyonlarına ait metotlar oluşur. Create, Read, Update, Delete
Mimari olarak N Tier dediğimiz N katmanlı mimari yapısını kullanıyoruz. Geliştirme olarak Repository Design Pattern kullanıyoruz.

3) Business Layer
* Validasyonların yazıldığı katmandır. Validasyonlar: girmiş olduğumuz prop ların kısıtlamaları için kullanılır.

4) Presentation Layer
* Sunum katmanı olarak geçer. Controller ve Frontend tarafında ki kodlar yer alır.

- İlk önce sırayla katmanları oluşturuyoruz.
2 temel klasörle çalışıyoruz genelde. Bu klasörlerin ismi Concrete ve Abstract'tır.

* Concrete klasöründe: Genellikle Class'lar ile çalışıyoruz.
* Abstract klasöründe: Genellikle Interface ile çalışıyoruz.

Not: Entity'lerimiz somut değerler, Interface ler ise soyut ifadeler olarak karşılıyor bizi.

- ilk önce sırayla projemizde oluşturacağımız tabloları yani somut değerleri entity katmanında concrete isminde klasör oluşturup
başlıkları tek tek class olarak tanımlıyoruz.
- Sonra Projenin içerisinde olması gereken EntityFrameworke ait olan paketleri yüklüyoruz.
4 Temel paket bunlar;
- EntityFramework Core, SQL, Tool, Desing paketlerini 4 katmana da yüklüyoruz.

- 2. aşama olarak DataAccessLayer katmanına Concrete klasörü oluşturuyoruz.
- içerisine Context classsı oluşturuyoruz.
Context: Veri tabanı yapılandırması içerisindeki bağlantı stringini tutan ve veri tabanına yansıtılacak olan tabloları
tutan clasımızdır.
* Context sınıfında veri tabanına yansıtmak istediğimiz tabloları çağırıp onları da property olarak çağırıyoruz. Ama türleri
DbSet olacaktır. DbSeti kullanmak içinde : koyup DbContext sınıfından miras aldırmamız gerekiyor.


# BAĞLANTI YAPILANDIRMASI (Sql CodeFirst ile Db oluşturma) #

*********************************************************************************************************************
public class Context : DbContext
   {
     protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
      {
    optionsBuilder.UseSqlServer("server=DESKTOP-C1IT2N4\\MSSQLSERVER02;database=DbCorePortfolio;integrated security=true");
      }
   }
  Context sınıfına bu şekilde yazıyoruz.

*********************************************************************************************************************

# KATMANLAR ARASI REFERANS İŞLEMİ #

- Hiçbir katman EntityLayer katmanı içerisinde yer almayacak !
- Entity Katmanı : DataAcces, BusinessLayer,Presentation(UI) katmanlarının içerisinde yer alacak. Yani bütün katmanlarda.
- Data Access Katmanı: BusinessLayer, Presentation(UI) katmanı içerisinde yer alacak.
- Business Layer Katmanı: Sadece Presentation(UI) katmanı içerisinde yer alır.

* Sonra sırayla Entity katmanında oluşturduğumuz sınıfları DataAccess de Context sınıfına tek tek DbSet olarak ekliyoruz.

# MİGRATİON İŞLEMİ #

- SQL e yansıtma işlemlerinde kullanılır. Package Manager Console da mutlaka DataAccessLayer seçilecek.Çünkü Context
sınıfı DataAccessLayer katmanı içerisinde olduğu için.

# INTERFACELER #

- Data Access katmanı içerisinde Abstract klasörü oluşturarak Interfaceler buraya tanımlanır.
- Entitylerin her biri için temel CRUD operasyonları olacaktır.
- interface de oluşturulan CRUD işlemlerini imza olarak düşünüp , Sonra classlarda içerisini dolduracağız.
- Bu yüzden Generic Interface oluşturacağız. Her bir entitylere tek tek CRUD operasyonu 
oluşturmaktansa generic yapıyla heryerden
erişilebilir hale getireceğiz.

- Abstract klasörünün içerisine IGenericDal diye interface oluşturup CRUD işlemlerini tanımlıyoruz. Daha sonra oluşturulan
Interfacelerin içerisine IGenericDal dan miraas alıyoruz bütün entityleri.

# GENERİC REPOSİTORY #

 - DataAccess katmanı üzerinde Repository adında klasör oluşturuyoruz. ve içerisine Class ekliyoruz GenericRepository adında.
 ve yapıyı Generic hale getiriyoruz.
 GenericRepository<T> : IGenericDal<T> where T : class yazarak.

 # ENTİTYFRAMEWORK DAL #

 - DataAccess katmanı üzerindeki son klasör. Bu klasörde CRUD operasyonlarından önce ki son adım EntityFramework üzerinden
 gelen değerlerdir.
 - Bütün Entityler için birer Class tanımlıyoruz EntityFramework klasörünün içerisine.
 tanımladığımız classları public hale getirip 

 - GenericRepository<About>, IAboutDal (GenericRepositoryden miras al, GenericRepository içerisine değer olarak
 açtığımız classdan veriyi alacaksın , Ayrıca açılan classDal dan değerleri de alacaksın diyoruz.)

 # GENERİC SERVİCE #

 - BusinessLayer katmanına ilk önce 3 klasör oluşturuyoruz. Bunlar Abstract , Concrete ve ValidationRules klasörleri
 - Abstract klasörüne tanımladığımız bileşenler birer service olacak. Bu servisler business tarafında CRUD operasyonları
 için gerekli olan metotların çağrılmadan önce imzasını taşıyacaktır.
 - ilk önce IGenericService adında interface oluşturuyoruz ve içerisine CRUD işlemlerini tanımlıyoruz.
 - Sonra bütün entitylere tek tek interface oluşturuyoruz ve tek tek IGenericService den miras alıyoruz.

 - Concrete klasörüne: Bütün entityleri class olarak ekleyip bunları Manager olarak adlandırıyoruz.
 - oluşturduğumuz Manager Classlarına ilgili classın Servicesini miras alıyor ve implement interface diyoruz.
 Örn:/  public class AboutManager : IAboutService diyerek miras alıyoruz.

 NOT: // UI katmanında wwwroot  isminde ki klasöre ımage dosyaları tema dosyaları vb dosyaları bunun içine atıyoruz CORE ile
 birlikte.





